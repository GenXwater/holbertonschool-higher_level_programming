# 0-add_integer.txt

===========================
UNITEST
===========================
This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
===========================
``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

>>> add_integer = __import__('0-add_integer').add_integer

::

>>> add_integer(5)
103

::

>>> add_integer(3, 7)
10

::

>>> add_integer(-10, 20)
10

::

>>> add_integer(0, -100)
-100

::

>>> add_integer(3.5, 2.7)
5

::

>>> add_integer(4.9, 98)
102

::

>>> add_integer(12, 0.99)
12

::

>>> add_integer(-1.9, 5)
4

::

>>> add_integer(0.1, -0.1)
0

::

>>> add_integer("string_test", 2)
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(5, "not_a_number")
Traceback (most recent call last):
TypeError: b must be an integer

::

>>> add_integer("invalid", "test")
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(None, 42)
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(100, None)
Traceback (most recent call last):
TypeError: b must be an integer

::

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

::

>>> add_integer(float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

>>> add_integer(10, float('inf'))
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

::

>>> add_integer(float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer

>>> add_integer(8, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to add_integer